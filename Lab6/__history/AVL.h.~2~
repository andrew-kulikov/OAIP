#include <vcl.h>

typedef struct _Node {
	int key;
    int number;
	int height;
    UnicodeString data;
	_Node* left;
	_Node* right;
	_Node(int k, UnicodeString s) {
        data = s;
		key = k;
		left = right = 0;
		height = 1;
	}
} Node;

class AVLTree {
public:
    Node* root;
    AVLTree() {
        root = NULL;
    }
    int Height(Node *p) {
        return p ? p->height : 0;
    }
    int BFactor(Node *p) {
        return Height(p->right) - Height(p->left);
    }
    void FixHeight(Node* p) {
        int hl = Height(p->left);
        int hr = Height(p->right);
        p->height = (hl > hr ? hl : hr) + 1;
    }
    Node* RotateRight(Node* p) {
        Node* q = p->left;
        p->left = q->right;
        q->right = p;
        FixHeight(p);
        FixHeight(q);
        return q;
    }
    Node* RotatLeft(Node* q) {
        Node* p = q->right;
        q->right = p->left;
        p->left = q;
        FixHeight(q);
        FixHeight(p);
        return p;
    }
    Node* RotateLeft(Node* q) {
        Node* p = q->right;
        q->right = p->left;
        p->left = q;
        FixHeight(q);
        FixHeight(p);
        return p;
    }

    Node* Balance(Node* p) {
        FixHeight(p);
        if (BFactor(p) == 2)
        {
            if (BFactor(p->right) < 0)
                p->right = RotateRight(p->right);
            return RotateLeft(p);
        }
        if (BFactor(p) == -2)
        {
            if (BFactor(p->left) > 0)
                p->left = RotateLeft(p->left);
            return RotateRight(p);
        }
        return p;
    }
    Node* Insert(Node* p, int k, UnicodeString s) {
        if (!p) {
            return new Node(k, s);
        }
        if (k > p->key) {
            p->right = Insert(p->right, k, s);
        }
        else {
            p->left = Insert(p->left, k, s);
        }
        return Balance(p);
    }

    Node* GetRoot() {
        return root;
    }
    void SetNumbers(Node* p, int &i) {
         p->number = i;
         i++;
         if (p->right) {
             SetNumbers(p->right, i);
         }
         if (p->left) {
             SetNumbers(p->left, i);
         }
    }
    void Show(Node* p, TTreeView *TreeView) {
         int i = 0;
         if (!p->number) {
            TreeView->Items->AddObject(NULL, p->key, p);
         }
         if (p->right) {
            TreeView->Items->AddChildObject(TreeView->Items->Item[p->number], p->right->key, p->right);
            Show(p->right, TreeView);
         }
         if (p->left) {
            TreeView->Items->AddChildObject(TreeView->Items->Item[p->number], p->left->key, p->left);
            Show(p->left, TreeView);
         }
    }
    void Path1(Node *root, TMemo *Memo) {
        if(root) {
            UnicodeString s = root->key;
            UnicodeString s1 = root->data;
            UnicodeString s2 = "(";
            UnicodeString s3 = ")";
            Memo->Lines->Add(s + s2 + s1 + s3);
        }
        if(root->left) {
            Path1(root->left, Memo);
        }
        if(root->right) {
            Path1(root->right, Memo);
        }
    }
};
