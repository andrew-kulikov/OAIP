
typedef struct _Node {
	int key;
    int number;
	int height;
	_Node* left;
	_Node* right;
	_Node(int k) {
		key = k;
		left = right = 0;
		height = 1;
	}
} Node;

class AVLTree {
private:
    Node* root;
    int i;
public:
    AVLTree() {
        root = new Node(0);
    }
    int Height(Node *p) {
        return p ? p->height : 0;
    }
    int BFactor(Node *p) {
        return Height(p->right) - Height(p->left);
    }
    void FixHeight(Node* p) {
        int hl = Height(p->left);
        int hr = Height(p->right);
        p->height = (hl > hr ? hl : hr) + 1;
    }
    Node* RotateRight(Node* p) {
        Node* q = p->left;
        p->left = q->right;
        q->right = p;
        FixHeight(p);
        FixHeight(q);
        return q;
    }
    Node* RotatLeft(Node* q) {
        Node* p = q->right;
        q->right = p->left;
        p->left = q;
        FixHeight(q);
        FixHeight(p);
        return p;
    }
    Node* RotateLeft(Node* q) {
        Node* p = q->right;
        q->right = p->left;
        p->left = q;
        FixHeight(q);
        FixHeight(p);
        return p;
    }

    Node* Balance(Node* p) {
        FixHeight(p);
        if (BFactor(p) == 2)
        {
            if (BFactor(p->right) < 0)
                p->right = RotateRight(p->right);
            return RotateLeft(p);
        }
        if (BFactor(p) == -2)
        {
            if (BFactor(p->left) > 0)
                p->left = RotateLeft(p->left);
            return RotateRight(p);
        }
        return p;
    }
    Node* Insert(int k) {
        if (!root) {
            return new Node(k);
        }
        if (k > root->key) {
            root->right = Insert(k);
        }
        else {
            root->left = Insert(k);
        }
        return Balance(root);
    }

    Node* GetNode() {
        return root;
    }
    /*Node* Insert(Node* p, int k) {
        if (p == NULL) {
            return new Node(k);
        }
        if (k > p->key) {
            p->right = Insert(p->right, k);
        }
        else {
            p->left = Insert(p->left, k);
        }
        return p;
    }     */
};
